#!/usr/bin/env node

let BaseMerit = require('./base'),
    program = require('commander'),
    fs = require('fs'),
    fse = require('fs-extra'),
    path = require('path'),
    log = require('./cli_logger'),
    Table = require('cli-table')

program
  .option('-f --fetch', 'fetch before determing status')
  .parse(process.argv)

class MeritStatus extends BaseMerit{
  constructor() {
    super()
  }

  shouldFetch() {
    return new Promise((resolve, reject) => {
      if (program.fetch === true) {
        this.loop(this.remoteFetch.bind(this))
        .then(resolve)
        .catch(reject)
      } else {
        return resolve()
      }
    })
  }

  remoteFetch(repo) {
    return new Promise((resolve, reject) => {
      this.status.fetch(repo)
      .then((result) => {
        return resolve()
      })
      .catch(reject)
    })
  }

  getAllBranchStatus() {
    return new Promise((resolve, reject) => {
      let proms = []

      this.repos.map((item) => {
        proms.push(this.getStatus(item))
        proms.push(this.getBranch(item))
      })
      Promise.all(proms)
      .then(resolve)
      .catch(reject)
    })
  }

  getStatus(repo) {
    return new Promise((resolve, reject) => {
      this.status.getStatus(repo)
      .then((value) => {
        this.update(repo.name, 'status', value.status)
        this.update(repo.name, 'clean', value.clean)
        this.update(repo.name, 'uptodate', value.status.upToDate)
        return resolve()
      })
      .catch(reject)
    })
  }

  getBranch(repo) {
    return new Promise((resolve, reject) => {
      this.status.getBranch(repo)
      .then((value) => {
        this.update(repo.name, 'branch', value.name)
        return resolve()
      })
      .catch(reject)
    })
  }

  output() {
    return new Promise((resolve, reject) => {
      let table = new Table({
          head: ['name', 'branch', 'clean', 'status', 'up-to-date'],
          colWidths: [30, 20, 10, 20, 10]
      })
      this.repos.map((item) => {
        table.push([item.name, item.branch, item.clean, this.determineStatus(item.status), item.uptodate])
      })
      log.info(table.toString())
      return resolve()
    })
  }

  determineStatus(status) {
    if (status.ahead === true) {
      return `Ahead by ${status.commitCount}`
    }

    if (status.behind === true) {
      return `Behind by ${status.commitCount}`
    }

    if (status.diverged) {
      return `Diverged`
    }
    return 'OK'
  }



  run () {
    this.loadConfig()
    .then(() => this.shouldFetch())
    .then(() => this.getAllBranchStatus())
    .then(() => this.output())
    .catch((err) => {
      console.log(err)
      log.error(err)
    })
  }
}

let status = new MeritStatus();
status.run()